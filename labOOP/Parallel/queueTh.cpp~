static void producer(size_t id, size_t items, size_t stock)
{
	for (size_t i = 0; i < items; ++i) 
	{
		unique_lock<mutex> lock(q_mutex);
		go_produce.wait(lock,[&] { return q.size() < stock; });

		q.push(id * 100 + i);

		go_consume.notify_all();
		this_thread::sleep_for(90ms);
	}
}

static void consumer(size_t id)
{
	while (!production_stopped || !q.empty()) 
	{
	unique_lock<mutex> lock(q_mutex);

	if (go_consume.wait_for(lock, 1s,[] { return !q.empty(); })) 
	{
		q.pop();

		go_produce.notify_all();
		this_thread::sleep_for(130ms);
	}
	}
}


int main()
{
	vector<thread> workers;
	vector<thread> consumers;

	for (size_t i = 0; i < 3; ++i) 
	{
		workers.emplace_back(producer, i, 15, 5);
	}

	for (size_t i = 0; i < 5; ++i) 
	{
		consumers.emplace_back(consumer, i);
	}

	for (auto &t : workers)
	{ t.join(); }
	production_stopped = true;
}
